pipeline {
    agent any
    
    parameters {
        string(name: 'EAPI_BRANCH', description: 'EAPI branch name')
        string(name: 'REACT_BRANCH', description: 'React branch name')
        booleanParam(name: 'logical_enc', defaultValue: false, description: 'Logical encryption flag')
        
        choice(
            name: 'PIPELINE_SELECTION',
            description: 'Select which pipeline(s) to trigger',
            choices: ['Staff', 'Cust', 'Both'],
            defaultValue: 'Both'
        )
    }
    
    stages {
        stage('Trigger Selected Pipelines') {
            steps {
                script {
                    // Parameters for Staff pipeline (only EAPI_BRANCH)
                    def staffParams = [
                        string(name: 'EAPI_BRANCH', value: params.EAPI_BRANCH)
                    ]
                    
                    // Parameters for Cust pipeline (all three parameters)
                    def custParams = [
                        string(name: 'EAPI_BRANCH', value: params.EAPI_BRANCH),
                        string(name: 'REACT_BRANCH', value: params.REACT_BRANCH),
                        booleanParam(name: 'logical_enc', value: params.logical_enc)
                    ]
                    
                    switch(params.PIPELINE_SELECTION.toUpperCase()) {
                        case 'STAFF':
                            build job: 'Staff', parameters: staffParams
                            break
                        case 'CUST':
                            build job: 'Cust', parameters: custParams
                            break
                        case 'BOTH':
                            parallel {
                                stage('Trigger Staff Pipeline') {
                                    steps {
                                        build job: 'Staff', parameters: staffParams
                                    }
                                }
                                stage('Trigger Cust Pipeline') {
                                    steps {
                                        build job: 'Cust', parameters: custParams
                                    }
                                }
                            }
                            break
                        default:
                            error("Invalid pipeline selection: ${params.PIPELINE_SELECTION}")
                    }
                }
            }
        }
    }
}
