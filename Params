pipeline {
    agent any

    // Environment variables
    environment {
        EAPI_REPO = 'https://github.com/yourorg/eapi-repo.git'
        NEXUS_URL = 'https://nexus.yourorg.com/repository'
    }

    // Parameters with Active Choice
    parameters {
        string(name: 'EAPI_BRANCH', description: 'The branch name for EAPI repository')
        string(name: 'REACT_BRANCH', description: 'The branch name for React repository')
        string(name: 'ReleaseConfigId', description: 'Release configuration ID')
        string(name: 'logicalEnvironment', description: 'Logical environment name')
        string(name: 'target_environment', description: 'Target environment name')

        // Active Choice parameter for pipeline selection
        activeChoice(
            name: 'PIPELINE_SELECTION',
            description: 'Select which pipeline(s) to trigger',
            choiceType: 'PT_SINGLE_SELECT',
            script: {
                return ['Staff', 'Cust', 'Both']
            }
        )
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "Selected pipeline: ${params.PIPELINE_SELECTION}"
                    echo "Environment Variables:"
                    echo "EAPI_REPO: ${env.EAPI_REPO}"
                    echo "NEXUS_URL: ${env.NEXUS_URL}"
                }
            }
        }

        stage('Trigger Pipelines') {
            steps {
                script {
                    // Common parameters for both pipelines
                    def commonParams = [
                        string(name: 'EAPI_REPO', value: env.EAPI_REPO),
                        string(name: 'NEXUS_URL', value: env.NEXUS_URL)
                    ]

                    // Staff pipeline parameters
                    def staffParams = commonParams + [
                        string(name: 'EAPI_BRANCH', value: params.EAPI_BRANCH)
                    ]

                    // Cust pipeline parameters
                    def custParams = commonParams + [
                        string(name: 'EAPI_BRANCH', value: params.EAPI_BRANCH),
                        string(name: 'ReleaseConfigId', value: params.ReleaseConfigId),
                        string(name: 'target_environment', value: params.target_environment)
                    ]

                    switch(params.PIPELINE_SELECTION.toUpperCase()) {
                        case 'STAFF':
                            echo "Triggering Staff pipeline with parameters: ${staffParams}"
                            build job: 'Staff', 
                                  parameters: staffParams,
                                  wait: false,
                                  propagate: false
                            break

                        case 'CUST':
                            echo "Triggering Cust pipeline with parameters: ${custParams}"
                            build job: 'Cust', 
                                  parameters: custParams,
                                  wait: false,
                                  propagate: false
                            break

                        case 'BOTH':
                            parallel {
                                stage('Trigger Staff Pipeline') {
                                    steps {
                                        echo "Triggering Staff pipeline with parameters: ${staffParams}"
                                        build job: 'Staff', 
                                              parameters: staffParams,
                                              wait: false,
                                              propagate: false
                                    }
                                }
                                stage('Trigger Cust Pipeline') {
                                    steps {
                                        echo "Triggering Cust pipeline with parameters: ${custParams}"
                                        build job: 'Cust', 
                                              parameters: custParams,
                                              wait: false,
                                              propagate: false
                                    }
                                }
                            }
                            break

                        default:
                            error("Invalid pipeline selection: ${params.PIPELINE_SELECTION}")
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed for selection: ${params.PIPELINE_SELECTION}"
        }
        failure {
            echo "Pipeline failed for selection: ${params.PIPELINE_SELECTION}"
            // You can add additional failure handling here
        }
    }
}
